<?php

/**
 * @file
 * Contains moody_feature_page.module.
 */

use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_html().
 */
function moody_feature_page_preprocess_html(&$variables) {
  if ($node = \Drupal::request()->attributes->get('node')) {
    if (is_object($node) && $node->bundle() == 'moody_feature_page') {
      $variables['attributes']['class'][] = 'moody-feature-page';
    }
    // For revision pages.
    if (is_string($node)) {
      $this_node = Node::load($node);
      if ($this_node->bundle() == 'moody_feature_page') {
        $variables['attributes']['class'][] = 'moody-feature-page';
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function moody_feature_page_preprocess_page(&$variables) {
  $node_type = FALSE;
  if (isset($variables['node']) && is_object($variables['node'])) {
    $node = $variables['node'];
    $node_type = $variables['node']->getType();
  }
  // For revision pages.
  if (isset($variables['node']) && is_string($variables['node'])) {
    $node = Node::load($variables['node']);
    $node_type = $node->getType();
  }
  if ($node_type == 'moody_feature_page') {
    // Pass color scheme to template for styling.
    $color_scheme = isset($node->get('field_color_scheme')->getValue()[0]['value']) ? $node->get('field_color_scheme')->getValue()[0]['value'] : '';
    $variables['color_scheme'] = $color_scheme;
    // Get node titles and links for previous/next links.
    $nid = $node->id();
    $previous_next = _get_previous_next_nodes($nid);
    $variables['prev_node'] = ($previous_next['prev'] != FALSE) ? $previous_next['prev'] : FALSE;
    $variables['next_node'] = ($previous_next['next'] != FALSE) ? $previous_next['next'] : FALSE;
  }
}

/**
 * Helper function to return previous and next nodes.
 */
function _get_previous_next_nodes($nid) {
  // Set array to return.
  $results = [];
  // Get array of all published moody feature pages.
  $nids = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'moody_feature_page')
    ->sort('created', 'ASC')
    ->execute();
  // Reset arrays keys to be sequential integers.
  $keyed_array = array_values($nids);
  // Get key of current node.
  $key_current = array_keys($keyed_array, $nid);
  // Get keys of previous and next nodes.
  $key_previous = $key_current[0] - 1;
  $key_next = $key_current[0] + 1;
  // Load previous and next nodes if set (they won't be set for first and last items in array).
  $previous_node = isset($keyed_array[$key_previous]) ? Node::load($keyed_array[$key_previous]) : NULL;
  $next_node = isset($keyed_array[$key_next]) ? Node::load($keyed_array[$key_next]) : NULL;
  // Get title and link for previous and next nodes if set and return.
  $results['prev'] = FALSE;
  $results['next'] = FALSE;
  if ($previous_node != NULL) {
    $prev_title = $previous_node->getTitle();
    $prev_link = $previous_node->toUrl()->toString();
    $results['prev']['title'] = $prev_title;
    $results['prev']['url'] = $prev_link;
  }
  if ($next_node != NULL) {
    $next_title = $next_node->getTitle();
    $next_link = $next_node->toUrl()->toString();
    $results['next']['title'] = $next_title;
    $results['next']['url'] = $next_link;
  }
  return $results;
}
