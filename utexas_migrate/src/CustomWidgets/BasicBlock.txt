<?php

namespace Drupal\utexas_migrate\CustomWidgets;

use Drupal\Core\Database\Database;
use Drupal\utexas_migrate\MigrateHelper;
use Drupal\migrate\MigrateSkipRowException;
use Drupal\migrate\MigrateExecutableInterface;
use Drupal\migrate\ProcessPluginBase;
use Drupal\migrate\Row;
use Drupal\Component\Serialization\Json;

/**
 * Convert D7 custom compound field to D8 Inline blocks.
 */
class BasicBlock {

  /**
   * Prepare an array for saving a block.
   *
   * @param array $data
   *   The D7 fields.
   *
   * @return array
   *   D8 block format.
   */
  public static function createBlockDefinition(array $data) {
    $block_definition = [
      'type' => $data['block_type'],
      'info' => $data['field_identifier'],
      'body' => [
        'value' => isset($data['block_data'][0]['value']) ? $data['block_data'][0]['value'] : 'remove this',
        'format' => isset($data['block_data'][0]['format']) ? $data['block_data'][0]['format'] : 'plain_text',
      ],
      'reusable' => FALSE,
    ];

    return $block_definition;
  }

  /**
   * Convert D7 data to D8 structure.
   *
   * @param string $instance
   *   Whether this is image_link_ 'a' or 'b'.
   * @param int $source_nid
   *   The node ID from the source data.
   *
   * @return array
   *   Returns an array of field data for the widget.
   */
  public static function getFromNid($instance, $source_nid) {
    $source_data = self::getSourceData($instance, $source_nid);
    $field_data = self::massageFieldData($source_data);
    return $field_data;
  }

  /**
   * Query the source database for data.
   *
   * @param string $instance
   *   Whether this is image_link_ 'a' or 'b'.
   * @param int $source_nid
   *   The node ID from the source data.
   *
   * @return array
   *   Returns an array of Paragraph ID(s) of the widget
   */
  public static function getSourceData($instance, $source_nid) {
    // Get all instances from the legacy DB.
    Database::setActiveConnection('utexas_migrate');
    $source_data = Database::getConnection()->select('field_data_field_' . $instance, 'f')
      ->fields('f')
      ->condition('entity_id', $source_nid)
      ->execute()
      ->fetchAll();
    $prepared = [];
    foreach ($source_data as $delta => $field) {
      $prepared[$delta] = [
        'value' => $field->{'field_' . $instance . '_value'},
        'format' => $field->{'field_' . $instance . '_format'},
      ];
    }
    return $prepared;
  }

  /**
   * Rearrange data as necessary for destination import.
   *
   * @param array $source
   *   A simple key-value array of subfield & value.
   *
   * @return array
   *   A simple key-value array returned the metadata about the field.
   */
  protected static function massageFieldData(array $source) {
    foreach ($source as $delta => $instance) {
      $source[$delta]['format'] = MigrateHelper::prepareTextFormat($instance['format']);
      // $pattern = '/\[\[{"fid"(.*)}}\]\]/';
      $match = str_replace("[[", "", $source[$delta]['value']);
      $match = str_replace("]]", "", $match);
      $tag = $match;
      print_r($tag);
      try {
        if (!is_string($tag)) {
          throw new MigrateSkipRowException('No File Tag', TRUE);
        }

        // Make it into a fancy array.
        $tag_info = Json::decode($tag);
        if (!isset($tag_info['fid'])) {
          throw new MigrateSkipRowException('No FID', TRUE);
        }

        // Load the file.
        $file = file_load($tag_info['fid']);
        if (!$file) {
          throw new MigrateSkipRowException('Couldn\'t Load File', TRUE);
        }

        // Grab the uri.
        $uri = $file->getFileUri();

        // The class attributes is a string, but drupal requires it to be an array, so we fix it here.
        if (!empty($tag_info['attributes']['class'])) {
          $tag_info['attributes']['class'] = explode(" ", $tag_info['attributes']['class']);
        }

        $settings['attributes'] = is_array($tag_info['attributes']) ? $tag_info['attributes'] : [];

        // Many media formatters will want to apply width and height independently
        // of the style attribute or the corresponding HTML attributes, so pull
        // these two out into top-level settings. Different WYSIWYG editors have
        // different behavior with respect to whether they store user-specified
        // dimensions in the HTML attributes or the style attribute, so check both.
        // Per http://www.w3.org/TR/html5/the-map-element.html#attr-dim-width, the
        // HTML attributes are merely hints: CSS takes precedence.
        if (isset($settings['attributes']['style'])) {
          $css_properties = $this->MediaParseCssDeclarations($settings['attributes']['style']);
          foreach (['width', 'height'] as $dimension) {
            if (isset($css_properties[$dimension]) && substr($css_properties[$dimension], -2) == 'px') {
              $settings[$dimension] = substr($css_properties[$dimension], 0, -2);
            }
            elseif (isset($settings['attributes'][$dimension])) {
              $settings[$dimension] = $settings['attributes'][$dimension];
            }
          }
        }
      }
      catch (Exception $e) {
        $msg = t('Unable to render media from %tag. Error: %error', ['%tag' => $tag, '%error' => $e->getMessage()]);
        throw new MigrateSkipRowException($msg, TRUE);
      }

      // Render the image.
      $element = [
        '#theme' => 'image',
        '#uri' => $uri,
        '#attributes' => isset($settings['attributes']) ? $settings['attributes'] : '',
        '#width' => $settings['width'],
        '#height' => $settings['height'],
      ];

      $output = \Drupal::service('renderer')->renderRoot($element);
      print_r($output);
      // $fid = preg_match('/[0-9]+/');
      // echo "fid: " . $fid;
      // $mid = MigrateHelper::getMediaIdFromFid($fid);
      // $fids = preg_match_all('/\[\[{"fid"(.*)}}\]\]/', $source[$delta]['value'], $matches);
      // // print_r($fids);
      // if (!empty($matches)) {
      //   foreach ($matches as $key => $value) {
      //     if (isset($value[0])) {
      //       // print_r($value[0]);
      //       $fid = preg_match('/[0-9]+/', $value[0], $matches);
      //       print_r($matches);
      //       echo "---";
      //     }
      //     // $mid = MigrateHelper::getMediaIdFromFid($value[$key][1]);
      //     // preg_replace($pattern, $mid, $source[$delta]['value']);
      //   }
      // }
      // $tmp = preg_replace('/\[\[{"fid"(.*)}}\]\]/', "JonBonJovi", $source[$delta]['value']);
      $source[$delta]['value'] = $match;

    }
    return $source;
  }

  /**
   * Copied from 7.x media module media.filter.inc (media_parse_css_declarations).
   *
   * Parses the contents of a CSS declaration block and returns a keyed array of property names and values.
   *
   * @param $declarations
   *   One or more CSS declarations delimited by a semicolon. The same as a CSS
   *   declaration block (see http://www.w3.org/TR/CSS21/syndata.html#rule-sets),
   *   but without the opening and closing curly braces. Also the same as the
   *   value of an inline HTML style attribute.
   *
   * @return
   *   A keyed array. The keys are CSS property names, and the values are CSS
   *   property values.
   */
  private function MediaParseCssDeclarations($declarations) {
    $properties = array();
    foreach (array_map('trim', explode(";", $declarations)) as $declaration) {
      if ($declaration != '') {
        list($name, $value) = array_map('trim', explode(':', $declaration, 2));
        $properties[strtolower($name)] = $value;
      }
    }
    return $properties;
  }

  /**
   * Transoifrm file entity into media embed.
   *
   * @param string $fid
   *   A fid for file entity.
   *
   * @return string
   *   A string with media embed markup.
   */
  protected static function transformMediaEmbed(string $fid) {
  //  <drupal-entity
  //   data-embed-button="media"
  //   data-entity-embed-display="view_mode:media.%s"
  //   data-entity-type="media"
  //   data-entity-id="%s">
  //  </drupal-entity>

  // <drupal-media
  //   data-align="center"
  //   data-entity-type="media"
  //   data-entity-uuid="36a2ad35-ccd0-4e2f-905b-e18777598e23">
  // </drupal-media>

    $fid = MigrateHelper::getMediaIdFromFid(1905);
    return $markup;
  }

}
