<?php

/**
 * @file
 * Contains Project listing block type .module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\block_content\Entity\BlockContent;

/**
 * Implements hook_entity_view_alter().
 */
function utexas_moody_carousel_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Bail if not our target block bundle.
  if (!$entity instanceof BlockContent || $entity->bundle() !== 'moody_carousel') {
    return;
  }

  // Bail if there is not an id attribute for the carousel.
  if (!isset($build['field_moody_carousel']['#attributes']['id'])) {
    return;
  }
  $id = $build['field_moody_carousel']['#attributes']['id'];

  // Map field names to Slick parameter names.
  $drupal_settings_field_map = [
    'field_moody_carousel_fade' => 'fade',
    'field_moody_carousel_autoplay' => 'autoplay',
    'field_moody_carousel_speed' => 'autoplaySpeed',
    'field_moody_carousel_dots' => 'dots',
  ];
  // Assign values from block fields to drupalSettings.
  foreach ($drupal_settings_field_map as $field_name => $setting_key) {
    if (!$entity->hasField($field_name)) {
      continue;
    }
    $field_value = $entity->get($field_name)->getString();
    $drupal_settings[$setting_key] = $field_value;
  }

  // Merge drupalSettings from block field values with the settings already
  // present in the field formatter.
  $drupal_settings = array_merge($build['field_moody_carousel']['#attached']['drupalSettings']['moody_carousel'][$id] ?? [], $drupal_settings);

  // Assign augmented drupalSettings for slick back to the appropriate key.
  $build['field_moody_carousel']['#attached']['drupalSettings']['moody_carousel'][$id] = $drupal_settings;
}
